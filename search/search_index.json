{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1.0 Introduction 1.1 Project Purpose The purpose of this technical document is to provide documentation to the prospective NPHL developer\u2019s technical team to help understand the architecture and structure of the RHTPT system. 1.2 System Overview The system was built using laravel framework version 5.3 which is a Model View Controller framework. This approach helped in developing of dynamic web systems. The front end was built with a combination of HTML 5 and Vuejs. The system database uses Mysql database queries and tables to perform CRUD operations with the assist of VueJs API Requests. 1.2.1 System Characteristics Operates in real-time and linked to month-end reporting. Supports a large number of concurrent users. Highly resilient or fault tolerant. Highly scaleable and easily maintainable in the future. 1.3 HTML5, VueJs and Controller Structure HTML and VueJs are used in the front end to render data and carry out API call requests from the front end to the backend via the web route to the controller. The project structure revolves around three folders the view folder that is found in the resource folder which contains the views of the different pages. The second folder is the controller\u2019s java script files that are found in the public/controllers folders. Finally the controllers for the different views which are found in the http/controllers folders. 1.4 Setup and Configurations 1.4.1 Requirements \u2022 Supported database. Currently only MySQL has been tested. \u2022 PHP version 5.6.21 \u2022 Composer - Dependency manager for PHP","title":"Introduction"},{"location":"#10-introduction","text":"","title":"1.0 Introduction"},{"location":"#11-project-purpose","text":"The purpose of this technical document is to provide documentation to the prospective NPHL developer\u2019s technical team to help understand the architecture and structure of the RHTPT system.","title":"1.1 Project Purpose"},{"location":"#12-system-overview","text":"The system was built using laravel framework version 5.3 which is a Model View Controller framework. This approach helped in developing of dynamic web systems. The front end was built with a combination of HTML 5 and Vuejs. The system database uses Mysql database queries and tables to perform CRUD operations with the assist of VueJs API Requests.","title":"1.2 System Overview"},{"location":"#121-system-characteristics","text":"Operates in real-time and linked to month-end reporting. Supports a large number of concurrent users. Highly resilient or fault tolerant. Highly scaleable and easily maintainable in the future.","title":"1.2.1 System Characteristics"},{"location":"#13-html5-vuejs-and-controller-structure","text":"HTML and VueJs are used in the front end to render data and carry out API call requests from the front end to the backend via the web route to the controller. The project structure revolves around three folders the view folder that is found in the resource folder which contains the views of the different pages. The second folder is the controller\u2019s java script files that are found in the public/controllers folders. Finally the controllers for the different views which are found in the http/controllers folders.","title":"1.3 HTML5, VueJs and Controller Structure"},{"location":"#14-setup-and-configurations","text":"","title":"1.4 Setup and Configurations"},{"location":"#141-requirements","text":"\u2022 Supported database. Currently only MySQL has been tested. \u2022 PHP version 5.6.21 \u2022 Composer - Dependency manager for PHP","title":"1.4.1 Requirements"},{"location":"design/","text":"2.1 Scope This functional and technical requirements document will outline the functional, performance, security, notifications and other system architectures to the developers. This document outlines briefly the technical aspect of the RHTPT system. 2.2 Functional Requirements Users Login: One of the core functions of this system is the user login. Different users with different roles will log into the dashboard with different sidebar menus. The administrator role will be able to see all the sidebar menu\u2019s as compared to a Participant role who will only have the Proficiency Testing Sidebar menu and results sub menu only. User Permissions: Different users can be given different permissions within the system that will grant them certain privileges and also limit them to what they can do within the system. One of the permission within the system is create role which when enabled for a specific user role will allow them to create roles for different users. Results Algorithm: This is a results \u201cmarking Scheme\u201d that compares the results entered by participants. The expected results are entered by the administrator for a specific round. Once the expected results are verified by the administrator it will be used as a reference by the algorithm to counter check the results entered by the participants. Once the algorithm counter checks the results of the participant it will either give an output of satisfactory or unsatisfactory. Configurations: The system allows for different configurations such as SMS, Programs, shipping agents and Designations. It enables the users to add their own preferred shipping agents, add programs create and send defaults/custom SMS to users. 2.3 Non-Functional Requirements Performance: The system response time is reliable as the algorithm improves on the results throughput which reduces the time from when the results are submitted to when they are checked and verified. This makes the system highly reliable as the process is automated hence enabling it to process large amount of data concurrently. Availability: The system build quality and speed has been designed to produce the at most performance when handing any amount of data. The system performance ranges between 90-95% as it is less prone to errors. Reliability: The mean time between failures is estimated at 5 minutes every 24 hours or so meaning that the system may fail for 5 minutes after every 24 hours which is highly unlikely considering the extensive amount of tests the system has undergone during development. Maintainability: The modularization of the system enables it to fix errors in case of failures that may occur while the system is still being used. After the errors have been fixed the patch can be merged into the system and restore full services within the shortest time possible. 2.4 Model View Controller (MVC) Approach. MVC is a software architectural pattern for implementing user interfaces. The modules will be redesigned using this approach so as to achieve modularisation of the system components. This will allow easy maintenance and upgrading of the system. 2.5 API Centric Development API centric development allows the system to expose an interface to other systems for easy integration. This design will allow integration of other third party systems seamless and performance optimization. The APIs will also create a uniform point for integrating all other applications e.g. Mobile application or services run by the organization. 2.6 Microservice Design pattern. Based on the development approach we have chosen, a Microservice design pattern come in handy. The pattern allows components of the system to run as independent applications. This improves the security and performance of system. This approach ensures all the system components are decoupled. A Microservice design pattern made it easier for scalability and availability, this is achieved by not allowing some failing components of the system to tamper with other services since each service is independent. 2.7 Notification Service The system has integrated a notification system so as to facilitate communication between the organization and its personnel. The service allows drafting of messages using predefined templates. This allows for flexibility and fast delivery of information to the clients in the field.","title":"System Design and Analysis"},{"location":"design/#21-scope","text":"This functional and technical requirements document will outline the functional, performance, security, notifications and other system architectures to the developers. This document outlines briefly the technical aspect of the RHTPT system.","title":"2.1 Scope"},{"location":"design/#22-functional-requirements","text":"Users Login: One of the core functions of this system is the user login. Different users with different roles will log into the dashboard with different sidebar menus. The administrator role will be able to see all the sidebar menu\u2019s as compared to a Participant role who will only have the Proficiency Testing Sidebar menu and results sub menu only. User Permissions: Different users can be given different permissions within the system that will grant them certain privileges and also limit them to what they can do within the system. One of the permission within the system is create role which when enabled for a specific user role will allow them to create roles for different users. Results Algorithm: This is a results \u201cmarking Scheme\u201d that compares the results entered by participants. The expected results are entered by the administrator for a specific round. Once the expected results are verified by the administrator it will be used as a reference by the algorithm to counter check the results entered by the participants. Once the algorithm counter checks the results of the participant it will either give an output of satisfactory or unsatisfactory. Configurations: The system allows for different configurations such as SMS, Programs, shipping agents and Designations. It enables the users to add their own preferred shipping agents, add programs create and send defaults/custom SMS to users.","title":"2.2 Functional Requirements"},{"location":"design/#23-non-functional-requirements","text":"Performance: The system response time is reliable as the algorithm improves on the results throughput which reduces the time from when the results are submitted to when they are checked and verified. This makes the system highly reliable as the process is automated hence enabling it to process large amount of data concurrently. Availability: The system build quality and speed has been designed to produce the at most performance when handing any amount of data. The system performance ranges between 90-95% as it is less prone to errors. Reliability: The mean time between failures is estimated at 5 minutes every 24 hours or so meaning that the system may fail for 5 minutes after every 24 hours which is highly unlikely considering the extensive amount of tests the system has undergone during development. Maintainability: The modularization of the system enables it to fix errors in case of failures that may occur while the system is still being used. After the errors have been fixed the patch can be merged into the system and restore full services within the shortest time possible.","title":"2.3 Non-Functional Requirements"},{"location":"design/#24-model-view-controller-mvc-approach","text":"MVC is a software architectural pattern for implementing user interfaces. The modules will be redesigned using this approach so as to achieve modularisation of the system components. This will allow easy maintenance and upgrading of the system.","title":"2.4 Model View Controller (MVC) Approach."},{"location":"design/#25-api-centric-development","text":"API centric development allows the system to expose an interface to other systems for easy integration. This design will allow integration of other third party systems seamless and performance optimization. The APIs will also create a uniform point for integrating all other applications e.g. Mobile application or services run by the organization.","title":"2.5 API Centric Development"},{"location":"design/#26-microservice-design-pattern","text":"Based on the development approach we have chosen, a Microservice design pattern come in handy. The pattern allows components of the system to run as independent applications. This improves the security and performance of system. This approach ensures all the system components are decoupled. A Microservice design pattern made it easier for scalability and availability, this is achieved by not allowing some failing components of the system to tamper with other services since each service is independent.","title":"2.6 Microservice Design pattern."},{"location":"design/#27-notification-service","text":"The system has integrated a notification system so as to facilitate communication between the organization and its personnel. The service allows drafting of messages using predefined templates. This allows for flexibility and fast delivery of information to the clients in the field.","title":"2.7 Notification Service"},{"location":"installation/","text":"The rhtpt system can be installed by going to this link https://github.com/ilabafrica/rhtpt or use this link to access it online http://rhtpt.or.ke. You can download the zip file or clone the repository to your machine. 1. Extract this git repository to a local folder git clone git@github.com:ilabafrica/rhtpt.git 2. Change directory to the root folder of the application. Update composer then run it in order to install the application dependencies. You may need root permissions to update composer. Composerself-update composer install 3. Update the application configuration files to suit your local settings: \u25e6 Set the \"Application URL\" in /app/config/app.php \u25e6 Create a database and set the database connection details in /app/config/database.php \u25e6 The organization name in /app/config/rhtpt.php 4. Run the migrations to create the required database tables. php artisan migrate 5. Load the basic seed data php artisan db:seed If #4 or #5 above fails, you may need to run the following command then repeat the two commands again. composer dumpautoload 1.6 Security and Privacy Considerations This system stores personal health test result for users which they might not other people to know about. Hence the system has been structured to give access to authorized users to whom they can view the data. One of the users who are not allowed to view the results are the partners as their work is just to oversee and support the different counties which they are in and are not included in the Proficiency testing process. This is why the permission for the partners to view the results is not checked in the administrators menu. This system was built to provide and protect that will be gathered of the following years and provide an analysis of the number of test done, the number of participant who participated in the rounds with the aim to improve the proficiency testing process as compared to what was being done previously using the manual method. 1.7 User Access Requirements In order for users to access this system they would require an internet connection as the system is web based and it is hosted on web based server that requires the client (user of the system) to make a request to the server through the web sites URL which will respond with the RHTPT login page. The users can then use their username i.e email or their enrollment ID\u2019s and passwords to log in to the system. For first time registration of participants into the system, they will be required to wait for an approval by their respective county or sub county coordinators to approve them. Once approved they will receive an SMS notification together with and email with their enrollment ID and confirmation of their registration into the system. 1.8 Security and Privacy rules The following are some of the security and privacy rules implemented in the system. \u2022 SMS sending is limited to the administrator only. \u2022 Expected results are entered by the administrator only for the coming round. \u2022 Results can be viewed by uses with access rights. \u2022 Filtering of participants and facilities is based on county region. \u2022 Depending on the users role they can either edit, create or view only.","title":"Installation"},{"location":"installation/#16-security-and-privacy-considerations","text":"This system stores personal health test result for users which they might not other people to know about. Hence the system has been structured to give access to authorized users to whom they can view the data. One of the users who are not allowed to view the results are the partners as their work is just to oversee and support the different counties which they are in and are not included in the Proficiency testing process. This is why the permission for the partners to view the results is not checked in the administrators menu. This system was built to provide and protect that will be gathered of the following years and provide an analysis of the number of test done, the number of participant who participated in the rounds with the aim to improve the proficiency testing process as compared to what was being done previously using the manual method.","title":"1.6 Security and Privacy Considerations"},{"location":"installation/#17-user-access-requirements","text":"In order for users to access this system they would require an internet connection as the system is web based and it is hosted on web based server that requires the client (user of the system) to make a request to the server through the web sites URL which will respond with the RHTPT login page. The users can then use their username i.e email or their enrollment ID\u2019s and passwords to log in to the system. For first time registration of participants into the system, they will be required to wait for an approval by their respective county or sub county coordinators to approve them. Once approved they will receive an SMS notification together with and email with their enrollment ID and confirmation of their registration into the system.","title":"1.7 User Access Requirements"},{"location":"installation/#18-security-and-privacy-rules","text":"The following are some of the security and privacy rules implemented in the system. \u2022 SMS sending is limited to the administrator only. \u2022 Expected results are entered by the administrator only for the coming round. \u2022 Results can be viewed by uses with access rights. \u2022 Filtering of participants and facilities is based on county region. \u2022 Depending on the users role they can either edit, create or view only.","title":"1.8 Security and Privacy rules"},{"location":"results_algorithm/","text":"4.1 Results Check Algorithm The algorithm is the one responsible for counter checking the results entered by participants. The algorithm file is found in app/console/commands folder. The algorithm is a scheduled cron job which can be configured in the server to run as frequently as possible. The algorithm file includes all the necessary model for it to run. It has a signature and a description that describe the console command. A new command is instantiated using the construct function as shown below. 4.2 Algorithm Functions 4.2.1 Handle Function The handle function shown below fetches pending records form the dump database table then moves them to the pt table. This process involves calling another function moveDump. Then the data in the pt table is again checked to see if the panel_status column has the value of \u2018checked\u2019 which is one (1). Then every row which has that value is assigned to the variable $pts which is then passed to another called function runAlgorithm as a parameter for the background processing of the results to start. 4.2.2 MoveDump Function This is the function which is called by the handle function to move data from the dump table to the pt table. The function uses the $dump parameter as the data retrieved from the dump table. Then a foreach loop is uses to loop through the rows. The if statement retrieves the participant full name column data so long as it is not empty. The participant name is used to find their id in the user\u2019s table that is if they exist. If the user is not in the user table, a new user is created with role of a participant. This is shown below; The mfl code is then used to find the id of the facility otherwise the facility name is used to retrieve the facility code. The sub county id is also fetched and assigned to the sub_county_id column in the facility table. If the facility name is not found a new sub county instance is created and the name, county_id are data are added to the instance and saved. Once the saved the sub county id is retrieved from the instance and assigned to the facility sub_county_id column then saved. The code is shown below; The algorithm continues to get the program is based on the Title which is vct and assigned it to the variable $program_id. Then a query is run to find if a user is registered in the registration table and if not, a new registration instance is created. Otherwise a check of the user is done to check if the given user id exist. Then the user is enrolled to the available round where a check is done to see if the user has been already enrolled to a round otherwise a new Enrol instance is created and saved. The new pt instance shown above is then uses to save all the data from the dump database able via the saveToPt function. Part of saving process is shown below; 4.3 SaveToPt Function This function saves the data from the dump table to the pt table. The function accepts parameters for its functionalities to run. First the field id is retrieved and if it has not been found, the field id is retrieved by the name and assigned to the $field_id variable. Then a result query is run to check if the record exist in the results table and if not a new result instance is created. Otherwise the results object is used to save data to the pt_id and filed_id columns. Finally the data is saved. The logic is shown below; 4.4 Strip (), is_a_date(), dates () Functions The strip function is responsible for removing the specified beginning of a text to get the Id alone, while the is_a_date function return the date format and finally the dates function is also responsible for the data format. 4.5 Check Functions This functions check whether the given parameters were correspond to the expected results once the results and test kits results are submitted by the user. \u2022 Check_dates (): This function checks when the testing panel kits were received by the participant. It also checks when the test panels were constituted and when they were used for testing. \u2022 Check_kit_info (): This functions checks that all the kit data provided is complete. \u2022 Check_expiry (): This function ensures that the kit used for testing was not expired. \u2022 Check_complete_results (): This functions ensures that all data to be captured by the results form was entered. \u2022 Check_correct_results (): This function checks the correctness of the results submitted. \u2022 Check_satisfaction (): This function uses the results from the check_corret_results to determine whether the results is unsatisfactory. \u2022 Check_validity (): This function checks if the results submitted are valid. \u2022 Check_algorithm (): This function checks if the algorithm was followed during results entry. \u2022 Check_overall (): This function sets the overall result either satisfactory or unsatisfactory. 4.6 Run Algorithm Function This is the function which process the results once they have been submitted by a user. The function uses the data from the pt table as the parameter. Then a foreach loop is used to loop through the rows using the $pts variable returned from the handle function. Expected results for the round are fetched by retrieving the round id and the user. The user details are retrieved through the user\u2019s registration id. Then the lot panels are also retrieved and assigned to the $res variable. The results from the $pt variables are then assigned to the $rs variable which is used to get all variables to be used after the loop. The different test kit variables columns are then filled identified by the id as shown below; After the kits and panels are checked the expected results are then fetched using the check function discussed above. After the results are checked agonists the expected results the pt table is updated with the below code and saved. Then a json response is returned indicating the algorithm has finished running.","title":"Results Algorithm"},{"location":"results_algorithm/#41-results-check-algorithm","text":"The algorithm is the one responsible for counter checking the results entered by participants. The algorithm file is found in app/console/commands folder. The algorithm is a scheduled cron job which can be configured in the server to run as frequently as possible. The algorithm file includes all the necessary model for it to run. It has a signature and a description that describe the console command. A new command is instantiated using the construct function as shown below.","title":"4.1 Results Check Algorithm"},{"location":"results_algorithm/#42-algorithm-functions","text":"","title":"4.2 Algorithm Functions"},{"location":"results_algorithm/#421-handle-function","text":"The handle function shown below fetches pending records form the dump database table then moves them to the pt table. This process involves calling another function moveDump. Then the data in the pt table is again checked to see if the panel_status column has the value of \u2018checked\u2019 which is one (1). Then every row which has that value is assigned to the variable $pts which is then passed to another called function runAlgorithm as a parameter for the background processing of the results to start.","title":"4.2.1 Handle Function"},{"location":"results_algorithm/#422-movedump-function","text":"This is the function which is called by the handle function to move data from the dump table to the pt table. The function uses the $dump parameter as the data retrieved from the dump table. Then a foreach loop is uses to loop through the rows. The if statement retrieves the participant full name column data so long as it is not empty. The participant name is used to find their id in the user\u2019s table that is if they exist. If the user is not in the user table, a new user is created with role of a participant. This is shown below; The mfl code is then used to find the id of the facility otherwise the facility name is used to retrieve the facility code. The sub county id is also fetched and assigned to the sub_county_id column in the facility table. If the facility name is not found a new sub county instance is created and the name, county_id are data are added to the instance and saved. Once the saved the sub county id is retrieved from the instance and assigned to the facility sub_county_id column then saved. The code is shown below; The algorithm continues to get the program is based on the Title which is vct and assigned it to the variable $program_id. Then a query is run to find if a user is registered in the registration table and if not, a new registration instance is created. Otherwise a check of the user is done to check if the given user id exist. Then the user is enrolled to the available round where a check is done to see if the user has been already enrolled to a round otherwise a new Enrol instance is created and saved. The new pt instance shown above is then uses to save all the data from the dump database able via the saveToPt function. Part of saving process is shown below;","title":"4.2.2 MoveDump Function"},{"location":"results_algorithm/#43-savetopt-function","text":"This function saves the data from the dump table to the pt table. The function accepts parameters for its functionalities to run. First the field id is retrieved and if it has not been found, the field id is retrieved by the name and assigned to the $field_id variable. Then a result query is run to check if the record exist in the results table and if not a new result instance is created. Otherwise the results object is used to save data to the pt_id and filed_id columns. Finally the data is saved. The logic is shown below;","title":"4.3 SaveToPt Function"},{"location":"results_algorithm/#44-strip-is_a_date-dates-functions","text":"The strip function is responsible for removing the specified beginning of a text to get the Id alone, while the is_a_date function return the date format and finally the dates function is also responsible for the data format.","title":"4.4 Strip (), is_a_date(), dates () Functions"},{"location":"results_algorithm/#45-check-functions","text":"This functions check whether the given parameters were correspond to the expected results once the results and test kits results are submitted by the user. \u2022 Check_dates (): This function checks when the testing panel kits were received by the participant. It also checks when the test panels were constituted and when they were used for testing. \u2022 Check_kit_info (): This functions checks that all the kit data provided is complete. \u2022 Check_expiry (): This function ensures that the kit used for testing was not expired. \u2022 Check_complete_results (): This functions ensures that all data to be captured by the results form was entered. \u2022 Check_correct_results (): This function checks the correctness of the results submitted. \u2022 Check_satisfaction (): This function uses the results from the check_corret_results to determine whether the results is unsatisfactory. \u2022 Check_validity (): This function checks if the results submitted are valid. \u2022 Check_algorithm (): This function checks if the algorithm was followed during results entry. \u2022 Check_overall (): This function sets the overall result either satisfactory or unsatisfactory.","title":"4.5 Check Functions"},{"location":"results_algorithm/#46-run-algorithm-function","text":"This is the function which process the results once they have been submitted by a user. The function uses the data from the pt table as the parameter. Then a foreach loop is used to loop through the rows using the $pts variable returned from the handle function. Expected results for the round are fetched by retrieving the round id and the user. The user details are retrieved through the user\u2019s registration id. Then the lot panels are also retrieved and assigned to the $res variable. The results from the $pt variables are then assigned to the $rs variable which is used to get all variables to be used after the loop. The different test kit variables columns are then filled identified by the id as shown below; After the kits and panels are checked the expected results are then fetched using the check function discussed above. After the results are checked agonists the expected results the pt table is updated with the below code and saved. Then a json response is returned indicating the algorithm has finished running.","title":"4.6 Run Algorithm Function"},{"location":"stracture/","text":"3.1 Backend Code Design To explain the system code design will use the participant CRUD together with the search functionality to explain the general PHP, Vuejs and Html design structures. 3.2 Participant Controller The participant controller is located as shown below; The controller imports the relevant classes which are required by the available functions within the controller using the use statement. Some of the classes which are used within the controller are shown below; 3.3 Functions The participant controller has different functions within it the functions are explained below; 3.3.1 Public function manageParticipant() This function returns the participant index.blade view file which displays it in the front end. 3.3.2 Public function index (Request $request) This function is responsible for filtering are fetching data depending also on the different roles from the various tables and pass the data though the participant java script file for them to be displayed in the front end. It uses the request parameter to fetch the necessary data. Some of the methods used in this function is the user statistics which is used to calculate the number of active and inactive participants. The code is shown below. Firstly the users where the user id (uid) is not null are retrieved and assigned to the variable $user_stats. Then a foreach loop is used to get each individual user using the variable $user_stat. An if statement is then used to if the column deleted_at is equal to null then the variable $active_users which was initialized to zero is assigned the sum total of each user where the column deleted_at is equal to null. Otherwise were the column deleted_at is not equal to null the sum of each of those users is assigned to the variable $inactive_users. 3.3.3 Filter based on User Roles The function contains methods that retrieve data depending on the role of the user who has logged into the system. The different roles include county coordinator, sub county coordinator, partner, and facility in charge. The code for this is explained below; The diagram below shows the code for two different roles that is the county coordinator and the sub county coordinator. The parameters of the if statement make use of the auth service provided by laravel to differentiate the different users who have logged into the system. The is Auth::user()->isCountyCoordinator() functions checks if the role of the user is the county coordinator. This function is retrieved the user model. If the role is found to be county coordinator then users and facilities are retrieved based on the county location of that coordinator and assigned to the $users variable by this query statement. $users=County::find(Auth::user()->ru()->tier)->users()->latest()->withTrashed()->paginate(100); The query uses the County model where the user is filtered then the role of the user is gotten by using role user(ru) then facilities which the user is in charge of is retrieved using tier and then finally all users who match that criteria are retrieved with a pagination of 100. This means for each page there will be a hundred results per page. Then the code for calculating statistic is applied. 3.3.5 Filter users by details The users filter also uses the $request parameter to sort participants based on the role of the users. If the role is a county coordinator the results will be filtered based on that criteria otherwise if it\u2019s the administrator role then it will filter based on the different conditions. The code is shown below; The code the $request service to get the users details donated by \u2018q\u2019 which is retrieved from the web route API get request shown below. Route::get('api/search_participant',['as'=>'participant.search', 'uses'=>'ParticipantController@index']); The request is as a result of the call made by the participant javascript file search functions shown below; This code is found in the public controllers folder participant.js file. The request which is used in the participant controller $request->get(\u2018q\u2019) is found in the functions http get request. Once the controller retrieves the data it is passed to the JavaScript file using the response function and returned as json data. The javasript search function uses the users array as the variable which stores the response user\u2019s data and then it can be accessed in the front end. 3.3.6 Store Function This function creates new users and stores them in the database. The code shown below; The code uses the validate function to verify the required fields. The password is then hashed for security reasons and stored. The role of the user when creating a user is stored in the $role variable then the $tier variable is initialized to null. This will be used to store the facility of the user. The facility id of the user will be then inserted into the user role table. 3.3.7 Destroy function This function disables the use account. Once the button is clicked the user receives a message that their account has been disabled. The code is shown and explained below; The message the user will receive is assigned to the $message variable together with their name which is a result of a query where the user is retrieved based on their \u2018id\u2019. The code uses the smshandler to send messages. The logic is wrapped up in a try_catch method which displays the error massage incase an error is encountered. 3.3.8 Restore Function The restore function shown below is designed to restore a disabled user. The function uses the \u2018id\u2019 of the user and the restore function to reactive the user. Then the id of the user is used to find the details of the user where the name of the user is concatenate with the message and assigned to the $message variable. The message is sent to the user using the smshandler servce with the user\u2019s phone and message variables as the parameters. 3.3.9 Transfer facility function This function is responsible for transferring participant from one facility to another. The function uses the request service and the $id variable to search for the particular user. The code finds the facility the user is transferring to and the result is assigned to the \u2018$fac\u2019 variable. Then $fac variable is assigned to the tier column. The program_id is then assigned to the $prog variable which is then assigned to the program_id column. Finally the content is saved and result returned as a json response. The code is shown below; 3.3.9.1 Enrolled function The enrolled function is used to get enrolled participants.. The code logic is shown and described below; The code starts off with the declaration of the error massage which is assigned to the error variable. The function uses the id parameter to get the identification of each individual participant. The id is used with the round table to get the user id\u2019s of the enrolled participants and convert them to an array using the toArray() function. Then the users details are retrieved and assigned to the variable $usrs. The code uses the if statement to check if the $usrs variable has more than zero rows then a foreach loop is applied to get each individual column. A facility query is initiated to get the facility which he is in then the individual object column is assigned to the specific object column of the foreach $enrol variable. The response variable is returned to the JavaScript file as an array of data. 3.4 Participant JavaScript file The Participant JavaScript file starts with including the CSRF token in the header and then a new Vue instance is created. The name of the initialized Vue object is manage-participant and is maintained in the \u2018el\u2019 vue property. The variable which are used within the file are initialized and declared in the \u2018data\u2019 Vue property. The Vue \u2018computed\u2019 property is responsible maintaining computational functions while the \u2018mounted\u2019 property is for declaring functions which need to be preloaded. The \u2018method\u2019 property is responsible for all functions within the JavaScript file. 3.4.1 GeVueUsers function This Vue participant JavaScript function is responsible for retrieving data via the API using the get request and handles the data from the json response gotten from the controller. The response json object is used to assign the different variables with the required values then an if statement is used as a condition of checking the different roles so as to retrieved the various counties, sub counties and facilities through the API. The code is shown below; 3.4.2 Create User Function This function registers a new user into the system. The function uses the validate function and the scope parameter to counter check the data entered in the fields. The function uses the post request to post data to the API for storage. The data is sent from the front end through binding of data from the this.newUser object. Then on successful data registration of a user a success massage notification popup with a timeout of 5000. Otherwise if there is an error during this process and error massage within the code will be displayed. The code is shown below; 3.4.3 Delete/disable User Function This function disables a user by making a call to the controller destroy function via the API. The function uses the user object parameter to get the specific user id so as to disable that user. Once disabled a success message will popup. The code is shown below; 3.4.4 Restore User Function This function uses the patch request in the API to restore a disabled user. The function also uses the \u2018user\u2019 parameter object to get the users id and on displays a message on success. The code is shown below; 3.4.5 Update User Function This function updates a particular participant\u2019s data using the put API request. The function captures data through binding i.e filluser.first_name is used in the #edit-user modal to get the first name of a user. On save a success message pops up otherwise an error message is shown. The code is shown below; 3.4.6 Other Participant JavaScript Function The file has a number of function which retrieve data such as the loadfacilities, loadprogram, loadroles.. loadsubcounties, and loadsexes. Other functions include the denyUser function which is used by an authorized user to reject a participant request for registration. The code is shown below; 3.4.7 Participant index file The participant file is responsible for data capture and manipulation. The data is presented to the index file by the JavaScript file enclosed in the \u2018el:manage-participant\u2019 property all data must be wrapped in a div as shown; 3.5 Link between Controllers, JavaScript, API and Index files When creating a new CRUD instance one will need a controller, js and index file. The controllers will be made using the php artisan make caravel make command. The javascript file will be in the appropriate folder as discussed above while the index file will be made in the resources folder. To link the three files to ensure that the functions are working correctly. Create a route in the API web route file as the one shown below; The javascript file in this case the participant javascript file API CRUD request will use the controllers CRUD as a resource. Then the javascript file if called in the browser during loading so as to carry out the various functionalities. To do this the below line is added at the bottom of the app.blade file. The below image shows the code in the context explained above together with other JavaScript files.","title":"Code Stracture"},{"location":"stracture/#31-backend-code-design","text":"To explain the system code design will use the participant CRUD together with the search functionality to explain the general PHP, Vuejs and Html design structures.","title":"3.1 Backend Code Design"},{"location":"stracture/#32-participant-controller","text":"The participant controller is located as shown below; The controller imports the relevant classes which are required by the available functions within the controller using the use statement. Some of the classes which are used within the controller are shown below;","title":"3.2 Participant Controller"},{"location":"stracture/#33-functions","text":"The participant controller has different functions within it the functions are explained below;","title":"3.3 Functions"},{"location":"stracture/#331-public-function-manageparticipant","text":"This function returns the participant index.blade view file which displays it in the front end.","title":"3.3.1 Public function manageParticipant()"},{"location":"stracture/#332-public-function-index-request-request","text":"This function is responsible for filtering are fetching data depending also on the different roles from the various tables and pass the data though the participant java script file for them to be displayed in the front end. It uses the request parameter to fetch the necessary data. Some of the methods used in this function is the user statistics which is used to calculate the number of active and inactive participants. The code is shown below. Firstly the users where the user id (uid) is not null are retrieved and assigned to the variable $user_stats. Then a foreach loop is used to get each individual user using the variable $user_stat. An if statement is then used to if the column deleted_at is equal to null then the variable $active_users which was initialized to zero is assigned the sum total of each user where the column deleted_at is equal to null. Otherwise were the column deleted_at is not equal to null the sum of each of those users is assigned to the variable $inactive_users.","title":"3.3.2 Public function index (Request $request)"},{"location":"stracture/#333-filter-based-on-user-roles","text":"The function contains methods that retrieve data depending on the role of the user who has logged into the system. The different roles include county coordinator, sub county coordinator, partner, and facility in charge. The code for this is explained below; The diagram below shows the code for two different roles that is the county coordinator and the sub county coordinator. The parameters of the if statement make use of the auth service provided by laravel to differentiate the different users who have logged into the system. The is Auth::user()->isCountyCoordinator() functions checks if the role of the user is the county coordinator. This function is retrieved the user model. If the role is found to be county coordinator then users and facilities are retrieved based on the county location of that coordinator and assigned to the $users variable by this query statement. $users=County::find(Auth::user()->ru()->tier)->users()->latest()->withTrashed()->paginate(100); The query uses the County model where the user is filtered then the role of the user is gotten by using role user(ru) then facilities which the user is in charge of is retrieved using tier and then finally all users who match that criteria are retrieved with a pagination of 100. This means for each page there will be a hundred results per page. Then the code for calculating statistic is applied.","title":"3.3.3 Filter based on User Roles"},{"location":"stracture/#335-filter-users-by-details","text":"The users filter also uses the $request parameter to sort participants based on the role of the users. If the role is a county coordinator the results will be filtered based on that criteria otherwise if it\u2019s the administrator role then it will filter based on the different conditions. The code is shown below; The code the $request service to get the users details donated by \u2018q\u2019 which is retrieved from the web route API get request shown below. Route::get('api/search_participant',['as'=>'participant.search', 'uses'=>'ParticipantController@index']); The request is as a result of the call made by the participant javascript file search functions shown below; This code is found in the public controllers folder participant.js file. The request which is used in the participant controller $request->get(\u2018q\u2019) is found in the functions http get request. Once the controller retrieves the data it is passed to the JavaScript file using the response function and returned as json data. The javasript search function uses the users array as the variable which stores the response user\u2019s data and then it can be accessed in the front end.","title":"3.3.5 Filter users by details"},{"location":"stracture/#336-store-function","text":"This function creates new users and stores them in the database. The code shown below; The code uses the validate function to verify the required fields. The password is then hashed for security reasons and stored. The role of the user when creating a user is stored in the $role variable then the $tier variable is initialized to null. This will be used to store the facility of the user. The facility id of the user will be then inserted into the user role table.","title":"3.3.6 Store Function"},{"location":"stracture/#337-destroy-function","text":"This function disables the use account. Once the button is clicked the user receives a message that their account has been disabled. The code is shown and explained below; The message the user will receive is assigned to the $message variable together with their name which is a result of a query where the user is retrieved based on their \u2018id\u2019. The code uses the smshandler to send messages. The logic is wrapped up in a try_catch method which displays the error massage incase an error is encountered.","title":"3.3.7 Destroy function"},{"location":"stracture/#338-restore-function","text":"The restore function shown below is designed to restore a disabled user. The function uses the \u2018id\u2019 of the user and the restore function to reactive the user. Then the id of the user is used to find the details of the user where the name of the user is concatenate with the message and assigned to the $message variable. The message is sent to the user using the smshandler servce with the user\u2019s phone and message variables as the parameters.","title":"3.3.8 Restore Function"},{"location":"stracture/#339-transfer-facility-function","text":"This function is responsible for transferring participant from one facility to another. The function uses the request service and the $id variable to search for the particular user. The code finds the facility the user is transferring to and the result is assigned to the \u2018$fac\u2019 variable. Then $fac variable is assigned to the tier column. The program_id is then assigned to the $prog variable which is then assigned to the program_id column. Finally the content is saved and result returned as a json response. The code is shown below;","title":"3.3.9 Transfer facility function"},{"location":"stracture/#3391-enrolled-function","text":"The enrolled function is used to get enrolled participants.. The code logic is shown and described below; The code starts off with the declaration of the error massage which is assigned to the error variable. The function uses the id parameter to get the identification of each individual participant. The id is used with the round table to get the user id\u2019s of the enrolled participants and convert them to an array using the toArray() function. Then the users details are retrieved and assigned to the variable $usrs. The code uses the if statement to check if the $usrs variable has more than zero rows then a foreach loop is applied to get each individual column. A facility query is initiated to get the facility which he is in then the individual object column is assigned to the specific object column of the foreach $enrol variable. The response variable is returned to the JavaScript file as an array of data.","title":"3.3.9.1 Enrolled function"},{"location":"stracture/#34-participant-javascript-file","text":"The Participant JavaScript file starts with including the CSRF token in the header and then a new Vue instance is created. The name of the initialized Vue object is manage-participant and is maintained in the \u2018el\u2019 vue property. The variable which are used within the file are initialized and declared in the \u2018data\u2019 Vue property. The Vue \u2018computed\u2019 property is responsible maintaining computational functions while the \u2018mounted\u2019 property is for declaring functions which need to be preloaded. The \u2018method\u2019 property is responsible for all functions within the JavaScript file.","title":"3.4 Participant JavaScript file"},{"location":"stracture/#341-gevueusers-function","text":"This Vue participant JavaScript function is responsible for retrieving data via the API using the get request and handles the data from the json response gotten from the controller. The response json object is used to assign the different variables with the required values then an if statement is used as a condition of checking the different roles so as to retrieved the various counties, sub counties and facilities through the API. The code is shown below;","title":"3.4.1 GeVueUsers function"},{"location":"stracture/#342-create-user-function","text":"This function registers a new user into the system. The function uses the validate function and the scope parameter to counter check the data entered in the fields. The function uses the post request to post data to the API for storage. The data is sent from the front end through binding of data from the this.newUser object. Then on successful data registration of a user a success massage notification popup with a timeout of 5000. Otherwise if there is an error during this process and error massage within the code will be displayed. The code is shown below;","title":"3.4.2 Create User Function"},{"location":"stracture/#343-deletedisable-user-function","text":"This function disables a user by making a call to the controller destroy function via the API. The function uses the user object parameter to get the specific user id so as to disable that user. Once disabled a success message will popup. The code is shown below;","title":"3.4.3 Delete/disable User Function"},{"location":"stracture/#344-restore-user-function","text":"This function uses the patch request in the API to restore a disabled user. The function also uses the \u2018user\u2019 parameter object to get the users id and on displays a message on success. The code is shown below;","title":"3.4.4 Restore User Function"},{"location":"stracture/#345-update-user-function","text":"This function updates a particular participant\u2019s data using the put API request. The function captures data through binding i.e filluser.first_name is used in the #edit-user modal to get the first name of a user. On save a success message pops up otherwise an error message is shown. The code is shown below;","title":"3.4.5 Update User Function"},{"location":"stracture/#346-other-participant-javascript-function","text":"The file has a number of function which retrieve data such as the loadfacilities, loadprogram, loadroles.. loadsubcounties, and loadsexes. Other functions include the denyUser function which is used by an authorized user to reject a participant request for registration. The code is shown below;","title":"3.4.6 Other Participant JavaScript Function"},{"location":"stracture/#347-participant-index-file","text":"The participant file is responsible for data capture and manipulation. The data is presented to the index file by the JavaScript file enclosed in the \u2018el:manage-participant\u2019 property all data must be wrapped in a div as shown;","title":"3.4.7 Participant index file"},{"location":"stracture/#35-link-between-controllers-javascript-api-and-index-files","text":"When creating a new CRUD instance one will need a controller, js and index file. The controllers will be made using the php artisan make caravel make command. The javascript file will be in the appropriate folder as discussed above while the index file will be made in the resources folder. To link the three files to ensure that the functions are working correctly. Create a route in the API web route file as the one shown below; The javascript file in this case the participant javascript file API CRUD request will use the controllers CRUD as a resource. Then the javascript file if called in the browser during loading so as to carry out the various functionalities. To do this the below line is added at the bottom of the app.blade file. The below image shows the code in the context explained above together with other JavaScript files.","title":"3.5 Link between Controllers, JavaScript, API and Index files"},{"location":"systemdesign/","text":"The following diagrams illustrate the overall system design of how the system was build and how different entities work within the system. The use case diagram shows some of the functions carried out by the different roles within the system. The use case is a general overview of the RHTPT system and the main users who interact with the system. One of the main users is the participants whose some of the functions are shown by the participant use case. The data flow diagram shows how different input data generates different out data for different users within the system. Data form the system is not unique to a specific user as it depends on the permission the users have. The above context diagram show the different entities that interact with the RHTPT system. 2.8.1 Hosting Requirements 2.8.2 Server Software The CDM is built on Microsoft .NET Framework version 2.0 with a database backend stored in Microsoft SQL Server. \u2022 Microsoft Windows 2012 or 2014 Server operating system \u2022 Microsoft Internet Information Server 5 or Microsoft Internet Information Server 6 Note: these components are included with Microsoft server operating systems but must be installed and configured separately. \u2022 Microsoft SQL Server 2012 2.9 Server Hardware 2.9.1 Web Server \u2022 Intel Pentium 3 or Intel Pentium 4 operating at 2 GHz or better, or AMD Athlon XP or AMD Athlon 64 operating at 1.8 GHz or better \u2022 512 MB RAM or better \u2022 Website files are approximately 85 MB. There are items that can make this grow. For example, users are able to upload participant documents to the system. Those files exist on the server with references to them in the database. 2.9.2 Database Server \u2022 Intel Pentium 3 or Intel Pentium 4 operating at 2 GHz or better, or AMD Athlon XP or AMD Athlon 64 operating at 1.8 GHz or better \u2022 512 MB RAM or better (1 GB recommended) \u2022 40 GB hard drive \u2013 This is a high estimate for space required. Actual space needed depends on number of participants, users, and files uploaded into the documents, forms, and participant files. As a rough estimate, a program of 1,000 participants would result in a database of approximately 200 MB in two years. 2.9.3 Africastalking This is a web based SMS integration API that helps in the sending of SMS notifications. The API can be used in various platforms such a php. The integration of the API into the system was easy as it only requires one file and the API username and key which can be gotten from the website if Africa\u2019s Talking. The API helped in the development of the SMS module which is responsible for bulk SMS notification to users. For more information on the API click on the following link http://docs.africastalking.com/sms/sending The AfricasTalking gateway php file is located \\rhtpt\\app\\Libraries in the project folders and can be accessed using \u201cuse App\\Libraries\\AfricasTalkingGateway\u201d in the controller.","title":"System Design"},{"location":"systemdesign/#281-hosting-requirements","text":"","title":"2.8.1 Hosting Requirements"},{"location":"systemdesign/#282-server-software","text":"The CDM is built on Microsoft .NET Framework version 2.0 with a database backend stored in Microsoft SQL Server. \u2022 Microsoft Windows 2012 or 2014 Server operating system \u2022 Microsoft Internet Information Server 5 or Microsoft Internet Information Server 6 Note: these components are included with Microsoft server operating systems but must be installed and configured separately. \u2022 Microsoft SQL Server 2012","title":"2.8.2 Server Software"},{"location":"systemdesign/#29-server-hardware","text":"","title":"2.9 Server Hardware"},{"location":"systemdesign/#291-web-server","text":"\u2022 Intel Pentium 3 or Intel Pentium 4 operating at 2 GHz or better, or AMD Athlon XP or AMD Athlon 64 operating at 1.8 GHz or better \u2022 512 MB RAM or better \u2022 Website files are approximately 85 MB. There are items that can make this grow. For example, users are able to upload participant documents to the system. Those files exist on the server with references to them in the database.","title":"2.9.1 Web Server"},{"location":"systemdesign/#292-database-server","text":"\u2022 Intel Pentium 3 or Intel Pentium 4 operating at 2 GHz or better, or AMD Athlon XP or AMD Athlon 64 operating at 1.8 GHz or better \u2022 512 MB RAM or better (1 GB recommended) \u2022 40 GB hard drive \u2013 This is a high estimate for space required. Actual space needed depends on number of participants, users, and files uploaded into the documents, forms, and participant files. As a rough estimate, a program of 1,000 participants would result in a database of approximately 200 MB in two years.","title":"2.9.2 Database Server"},{"location":"systemdesign/#293-africastalking","text":"This is a web based SMS integration API that helps in the sending of SMS notifications. The API can be used in various platforms such a php. The integration of the API into the system was easy as it only requires one file and the API username and key which can be gotten from the website if Africa\u2019s Talking. The API helped in the development of the SMS module which is responsible for bulk SMS notification to users. For more information on the API click on the following link http://docs.africastalking.com/sms/sending The AfricasTalking gateway php file is located \\rhtpt\\app\\Libraries in the project folders and can be accessed using \u201cuse App\\Libraries\\AfricasTalkingGateway\u201d in the controller.","title":"2.9.3 Africastalking"}]}